name: Build and Push Docker Image

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        run: echo "** TASK D.1 - Replace this step with your SonarCloud analysis command (using SonarSource/sonarcloud-github-action@v2.2.0) **"
        # Hints:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions
          # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Needs to be created in your SonarCloud Account and stored in your github repository secrets
          # -Dsonar.projectKey=<your-project-key>
          # -Dsonar.organization=<your-private-sonarcloud-organization>
          # -Dsonar.sources=.

  test:
    needs: code-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test


  publish-docker-image:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: pmoregistry.azurecr.io  # e.g. myregistry.azurecr.io
          username:     admin # typically the registry name
          password:     ${{ secrets.REGISTRY_PW }} 

      - name: Generate and Push Git Tag for New Version
        id: versioning
        run: |
          set -e

          # Get latest semver-sorted tag, if any
          latest_tag=$(git tag --sort=-v:refname | head -n1)
          echo "Latest tag: $latest_tag"

          if [ -z "$latest_tag" ]; then
            # No tags yet → use version from package.json
            new_tag=$(jq -r .version package.json)
          else
            # Split into major.minor.patch
            IFS='.' read -r major minor patch <<< "$latest_tag"
            # Bump minor by 1 (i.e. +0.1), reset patch to 0
            minor=$((minor + 1))
            new_tag="$major.$minor.0"
          fi

          echo "Creating new tag → $new_tag"

          # Configure git user for the tag commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push the tag
          git tag "$new_tag"
          git push origin "$new_tag"

      - name: Build the Docker image
        run: |
          docker build -t lrengineering.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }} -t lrengineering.azurecr.io/ipt-spins:latest .

      - name: Push the Docker image to ACR
        run: echo "** TASK B.3 - Push the docker images to the ACR **"
